name: Sync figma icons

on:
  push:
    branches: [ master ]

env: 
  FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}

jobs:
  check-new-version:
    runs-on: ubuntu-latest
    outputs:
      test: 123
    steps:
      - uses: actions/checkout@v2

      - name: set npm token
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

#       - name: share npmrc
#         uses: actions/upload-artifact@v1.0.0
#         with:
#           name: npmrc
#           path: .npmrc

      - name: cache node modules
        id: cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - run: yarn check-new-version

      - name: check new version
        id: version
        run: echo "::set-output name=hasNewVersion::$(yarn -s check-new-version)"       

  build:
    needs: [check-new-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo ${{ toJson(needs) }}
#       - name: download artifact
#         uses: actions/download-artifact@v1.0.0
#         with:
#           name: npmrc
      
      - name: cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      
      - name: fetch and build new version
#         id: build
#         if: steps.version.outputs.hasNewVersion == 'true'
        run: yarn build


